plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

def VUFORIA_ENGINE_PATH = '../../../..'

// This file includes directives to enable the use of ARCore APIs in the App
// These directives are not necessary to use Vuforia. They are only required if
// the App will be using additional ARCore capabilities not exposed by Vuforia.

// The path to extract the ARCore native libraries to
// Part of enabling use of ARCore APIs in the App
def ARCORE_LIBPATH = "${buildDir}/arcore-native"

// Create a configuration to mark which aars to extract .so files from
// Part of enabling use of ARCore APIs in the App
configurations { natives }

android {
    namespace "com.vuforia.engine.native_sample"

    defaultConfig {
        compileSdk 35
        targetSdk 35
        minSdk 29
        ndkVersion "26.1.10909125" // NDK r26b

        versionCode 1
        versionName '11.3.4'

        ndk {
            // Default ABI list for this app, can be over-ridden by providing an abiList property
            // e.g. gradle -PabiList=x86 clean assembleDebug
            //noinspection ChromeOsAbiSupport
            abiFilters ((project.findProperty('abiList') ?: 'arm64-v8a').split(/,\s*/))
        }
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17"

                // Pass ARCore paths to cmake
                // Part of enabling use of ARCore APIs in the App
                arguments "-DARCORE_LIBPATH=${ARCORE_LIBPATH}/jni",
                        "-DARCORE_INCLUDE=${project.rootDir}/arcore/include"
            }
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }

    archivesBaseName = "vuforia-native-sample"
    sourceSets {
        main {
            assets.srcDirs += ['../../Assets/ImageTargets','../../Assets/ModelTargets']
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.22.1"
        }
    }
    buildFeatures {
        viewBinding true
        compose = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.11" // ✅ 与 Kotlin 1.9.20 兼容
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'

    implementation("de.hdodenhof:circleimageview:3.1.0")
    implementation("io.github.youth5201314:banner:2.2.3")
    implementation("com.makeramen:roundedimageview:2.3.0")
    implementation("com.facebook.fresco:fresco:3.6.0")
    implementation("com.google.android.gms:play-services-location:21.0.1")
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.compose.ui:ui-graphics-android:1.8.3'
    implementation 'androidx.compose.foundation:foundation-android:1.8.3'
    implementation 'androidx.compose.material3:material3-android:1.3.2'
    implementation 'androidx.compose.runtime:runtime-android:1.8.3'

    def camerax_version = "1.3.0"
    implementation("androidx.camera:camera-core:$camerax_version")
    implementation("androidx.camera:camera-camera2:$camerax_version")
    implementation("androidx.camera:camera-lifecycle:$camerax_version")
    implementation("androidx.camera:camera-view:$camerax_version")
    implementation("androidx.camera:camera-extensions:$camerax_version")

    implementation("com.github.bumptech.glide:glide:4.16.0")
    annotationProcessor("com.github.bumptech.glide:compiler:4.16.0")

    implementation files("$VUFORIA_ENGINE_PATH/build/java/VuforiaEngine.jar")

    implementation 'com.google.ar:core:1.45.0' // Add ARCore support
    natives 'com.google.ar:core:1.45.0' // Enabling use of ARCore APIs in the App
}

// Extract the shared libraries from aars in the natives configuration.
// This is done so that NDK builds can access these libraries.
// Method added as part of enabling use of ARCore APIs in the App
tasks.register('extractNativeLibraries') {
    // Always extract, this insures the native libs are updated if the version changes.
    outputs.upToDateWhen { false }
    doFirst {
        configurations.natives.files.each { f ->
            copy {
                from zipTree(f)
                into ARCORE_LIBPATH
                include "jni/**/*"
            }
        }
    }
}

// Method added as part of enabling use of ARCore APIs in the App
tasks.configureEach {
    task -> if ((task.name.contains("external") || task.name.contains("CMake")) && !task.name.contains("Clean")) {
        task.dependsOn(extractNativeLibraries)
    }
}

// Add a wrapper task so that this project can be imported into Android Studio
tasks.register('wrapper', Wrapper) {
    gradleVersion = "latest"
}
